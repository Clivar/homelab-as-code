- name: Include Kubespray cluster.yml playbook
  import_playbook: kubespray/cluster.yml

- name: Install kube-vip Cloud Provider and configure IP range
  hosts: kube_control_plane[0]
  tasks:
    - name: Apply kube-vip Cloud Provider manifest
      ansible.builtin.shell:
        cmd: kubectl apply -f https://raw.githubusercontent.com/kube-vip/kube-vip-cloud-provider/main/manifest/kube-vip-cloud-controller.yaml
      register: kube_vip_apply_result
      changed_when: "'created' in kube_vip_apply_result.stdout"

    - name: Check if kubevip ConfigMap exists
      ansible.builtin.shell:
        cmd: kubectl get configmap kubevip -n kube-system -o jsonpath='{.metadata.name}'
      register: kube_vip_configmap_check
      ignore_errors: yes

    - name: Create global CIDR ConfigMap for kube-vip
      ansible.builtin.shell:
        cmd: kubectl create configmap -n kube-system kubevip --from-literal cidr-global=172.16.16.1/24
      when: kube_vip_configmap_check.rc != 0

- name: Install Sealed Secrets with custom key pair
  hosts: kube_control_plane[0]
  tags: gitops
  vars:
    custom_key_pair_dir: sealed-secrets-keys
    custom_key_secret_name: sealed-secrets-custom-key
    sealed_secrets_namespace: kube-system
  tasks:
    - name: Add Bitnami Helm repository
      command: helm repo add bitnami https://charts.bitnami.com/bitnami

    - name: Update Helm repositories
      command: helm repo update

    - name: Check if custom key exists in Kubernetes
      ansible.builtin.command:
        cmd: kubectl get secret {{ custom_key_secret_name }} --no-headers -n {{ sealed_secrets_namespace }}
      register: secret_output
      ignore_errors: true

    - name: Copy custom key pair to Kubernetes master
      ansible.builtin.copy:
        src: "{{ custom_key_pair_dir }}/{{ item }}"
        dest: "/tmp/{{ item }}"
      loop:
        - tls.crt
        - tls.key
      when: secret_output.rc != 0

    - name: Create Kubernetes secret with custom key pair
      command: >
        kubectl create secret tls {{ custom_key_secret_name }}
        --cert=/tmp/tls.crt
        --key=/tmp/tls.key
        -n {{ sealed_secrets_namespace }}
      when: secret_output.rc != 0

    - name: Cleanup custom key pair from Kubernetes master
      ansible.builtin.file:
        path: "/tmp/{{ item }}"
        state: absent
      loop:
        - tls.crt
        - tls.key
      when: secret_output.rc != 0
    
    - name: Set Kubernetes secret with custom key pair as active
      command: >
        kubectl -n {{ sealed_secrets_namespace }}
        label secret {{ custom_key_secret_name }}
        sealedsecrets.bitnami.com/sealed-secrets-key=active
        
    - name: Install Sealed Secrets Helm chart with custom key pair
      command: >
        helm upgrade --install sealed-secrets
        bitnami/sealed-secrets
        --namespace {{ sealed_secrets_namespace }}
        --set 'secretName={{ custom_key_secret_name }}'

- name: Install Gitlab Agent package
  hosts: kube_control_plane[0]
  tags: gitops
  become: yes
  tasks:
    - name: Add GitLab Helm repository
      command: helm repo add gitlab https://charts.gitlab.io

    - name: Update Helm repositories
      command: helm repo update

    - name: Install GitLab Agent Helm chart
      command: >
        helm upgrade --install releases gitlab/gitlab-agent 
        --namespace gitlab-agent-releases 
        --create-namespace 
        --set config.token={{ gitlab_agent_token }}
        --set config.kasAddress=wss://kas.gitlab.com
        --version 1.16.0

- name: Install Gitlab Runner package
  hosts: kube_control_plane[0]
  tags: gitops
  become: yes
  tasks:
    - name: Add GitLab Helm repository
      command: helm repo add gitlab https://charts.gitlab.io

    - name: Update Helm repositories
      command: helm repo update

    - name: Install GitLab Runner Helm chart
      command: >
        helm upgrade --install default gitlab/gitlab-runner  
        --namespace gitlab
        --create-namespace 
        --set runnerRegistrationToken={{ gitlab_runner_token }}
        --set gitlabUrl=https://gitlab.com/
        --version 0.51.1

- name: Install Rook package
  hosts: kube_control_plane[0]
  tags: rook
  become: yes
  tasks:
    - name: Add Rook Helm repository
      command: helm repo add rook-release https://charts.rook.io/release

    - name: Update Helm repositories
      command: helm repo update

    - name: Copy the Snapshot CRDs files over
      ansible.builtin.copy:
        src: csi-external-snapshotter/client/config/crd/
        dest: /tmp/csi-crd
      
    - name: Install Snapshot CRDs
      shell: kubectl kustomize /tmp/csi-crd | kubectl create -f -
      ignore_errors: true

    - name: Copy the Common Snapshot Controller files over
      ansible.builtin.copy:
        src: csi-external-snapshotter/deploy/kubernetes/snapshot-controller/
        dest: /tmp/csi-controller

    - name: Install Common Snapshot Controller
      shell: kubectl -n kube-system kustomize /tmp/csi-controller | kubectl create -f -
      ignore_errors: true

    - name: Process the Rook Operator Helm values template
      ansible.builtin.template:
        src: "rook-operator/values.yml"
        dest: "/tmp/rook-operator-values.yml"

    - name: Install Rook Operator Helm chart
      command: >
        helm upgrade --install rook-ceph rook-release/rook-ceph --namespace rook-ceph --create-namespace -f /tmp/rook-operator-values.yml --version v1.11.4
    
    - name: Wait for the Rook Operator to be ready
      command: >
        kubectl -n rook-ceph rollout status deploy/rook-ceph-operator
      register: result
      until: result.rc == 0
      retries: 60
      delay: 5

    - name: Process the Rook Cluster Helm values template
      ansible.builtin.template:
        src: "rook-cluster/values.yml"
        dest: "/tmp/rook-cluster-values.yml"

    - name: Install Rook Cluster Helm chart
      command: >
        helm upgrade --install rook-ceph-cluster rook-release/rook-ceph-cluster --namespace rook-ceph --create-namespace -f /tmp/rook-cluster-values.yml --version v1.11.4

- name: Copy Kubernetes config from master to local machine
  hosts: kube_control_plane[0]
  become: yes
  tasks:
    - name: Get Kubernetes admin config
      command: cat /etc/kubernetes/admin.conf
      register: kube_config_output

    - name: Copy Kubernetes admin config to local machine
      delegate_to: localhost
      become: no
      ansible.builtin.copy:
        content: "{{ kube_config_output.stdout }}"
        dest: "~/.kube/config"
        mode: 0600

- name: Set server ip to first Kubernetes master
  hosts: localhost
  become: no
  tasks:
    - name: Get the IP address of the first Kubernetes master
      set_fact:
        k8s_master_ip: "{{ kube_vip_address }}"

    - name: Update server attribute in Kubernetes config
      ansible.builtin.shell:
        cmd: "sed -i 's|server:.*|server: https://{{ k8s_master_ip }}:6443|' ~/.kube/config"

- name: Install Velero on Kubernetes cluster using kubectl and Ansible Vault
  hosts: localhost
  become: no
  tasks:
    - name: Check if Velero is installed
      shell: velero version
      register: velero_check
      ignore_errors: true
    - name: Download Velero CLI
      get_url:
        url: https://github.com/vmware-tanzu/velero/releases/download/v1.11.0/velero-v1.11.0-linux-amd64.tar.gz
        dest: /tmp/velero.tar.gz
      when: velero_check.rc != 0

    - name: Extract Velero CLI
      unarchive:
        src: /tmp/velero.tar.gz
        dest: /tmp
      when: velero_check.rc != 0

    - name: Create ~/.local/bin directory if it does not exist
      file:
        path: "{{ ansible_env.HOME }}/.local/bin"
        state: directory
        mode: '0700'
      when: velero_check.rc != 0

    - name: Move Velero CLI to ~/.local/bin
      command: mv /tmp/velero-v1.11.0-linux-amd64/velero "{{ ansible_env.HOME }}/.local/bin"
      when: velero_check.rc != 0

    - name: Make Velero CLI executable
      file:
        path: "{{ ansible_env.HOME }}/.local/bin/velero"
        mode: '0755'
      when: velero_check.rc != 0

    - name: Check if ~/.local/bin is in PATH
      shell: echo $PATH | grep -q "{{ ansible_env.HOME }}/.local/bin"
      register: path_check
      changed_when: false

    - name: Add ~/.local/bin to PATH if not present
      lineinfile:
        path: "{{ ansible_env.HOME }}/.bashrc"
        line: 'export PATH=$PATH:$HOME/.local/bin'
        state: present
        insertafter: EOF
      when: not path_check.rc and velero_check.rc != 0

    - name: Source .bashrc to update PATH
      shell: source "{{ ansible_env.HOME }}/.bashrc"
      args:
        executable: /bin/bash
      when: not path_check.rc and velero_check.rc != 0


    - name: Create Wasabi S3-compatible storage credentials file
      copy:
        content: |
          [default]
          aws_access_key_id = {{ wasabi_access_key }}
          aws_secret_access_key = {{ wasabi_secret_key }}
        dest: /tmp/wasabi-credentials
      no_log: true

    - name: Install Velero with Wasabi S3-compatible storage configuration
      command: >
        velero install \
          --kubeconfig {{ ansible_env.HOME }}/.kube/config \
          --provider aws \
          --plugins velero/velero-plugin-for-aws:v1.7.0,velero/velero-plugin-for-csi:v0.5.0 \
          --bucket {{ wasabi_bucket }} \
          --backup-location-config region=us-east-1,s3ForcePathStyle="true",s3Url=https://s3.eu-west-2.wasabisys.com \
          --snapshot-location-config region=us-east-1 \
          --secret-file /tmp/wasabi-credentials \
          --features=EnableCSI \
          --wait

    - name: Check if daily backup schedule exists
      command: velero schedule get daily-backup
      register: daily_backup_schedule
      ignore_errors: true

    - name: Schedule daily Velero backups
      command: |
        velero schedule create daily-backup --schedule="0 7 * * *" --ttl 168h0m0s --include-resources persistentvolumes,persistentvolumeclaims
      when: daily_backup_schedule.rc != 0

    - name: Check if weekly backup schedule exists
      command: velero schedule get weekly-backup
      register: weekly_backup_schedule
      ignore_errors: true

    - name: Schedule weekly Velero backups
      command: |
        velero schedule create weekly-backup --schedule="0 7 * * 0" --ttl 504h0m0s --include-resources persistentvolumes,persistentvolumeclaims
      when: weekly_backup_schedule.rc != 0
      
- name: Expose Nginx Ingress
  hosts: kube_control_plane[0]
  tags: nginx
  become: yes
  tasks:
    - name: Copy yaml to Kubernetes master
      ansible.builtin.copy:
        src: "ingress-nginx/service.yml"
        dest: "/tmp/ingress-nginx-service.yml"
    - name: Set Kubernetes secret with custom key pair as active
      command: kubectl apply -f /tmp/ingress-nginx-service.yml -n {{ ingress_nginx_namespace }}
    - name: Check if Kubernetes secret exists
      command: 
        cmd: kubectl get secret wildcard-tls -n {{ ingress_nginx_namespace }}
      register: secret_exists
      ignore_errors: true
    - name: Copy custom key pair to Kubernetes master
      ansible.builtin.copy:
        src: "ingress-nginx/{{ item }}"
        dest: "/tmp/nginx-wildcard-{{ item }}"
      loop:
        - tls.crt
        - tls.key
      when: secret_exists.rc != 0
    - name: Create Kubernetes secret with custom key pair
      command: >
        kubectl create secret tls wildcard-tls
        --cert=/tmp/nginx-wildcard-tls.crt
        --key=/tmp/nginx-wildcard-tls.key
        -n {{ ingress_nginx_namespace }}
      when: secret_exists.rc != 0
    
- name: Install kubeseal
  hosts: localhost
  gather_facts: no
  become:
  tasks:
    - name: Check if kubeseal is installed
      command: kubeseal --version
      register: kubeseal_check
      ignore_errors: true

    - name: Download kubeseal tar.gz
      get_url:
        url: "https://github.com/bitnami-labs/sealed-secrets/releases/download/v0.22.0/kubeseal-0.22.0-linux-amd64.tar.gz"
        dest: "/tmp/kubeseal.tar.gz"
        mode: '0644'
      when: kubeseal_check.rc != 0

    - name: Extract kubeseal tar.gz
      unarchive:
        src: /tmp/kubeseal.tar.gz
        dest: /tmp
      when: kubeseal_check.rc != 0

    - name: Create ~/.local/bin directory if it does not exist
      file:
        path: ~/.local/bin
        state: directory
        mode: '0700'
      when: kubeseal_check.rc != 0

    - name: Move kubeseal to ~/.local/bin
      command: mv /tmp/kubeseal ~/.local/bin
      when: kubeseal_check.rc != 0

    - name: Make kubeseal executable
      file:
        path: ~/.local/bin/kubeseal
        mode: '0755'
      when: kubeseal_check.rc != 0